generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  ADMIN
  USER
}

model User {
  id          String       @id @default(cuid())
  role        USER_ROLE    @default(USER)
  name        String
  email       String       @unique
  password    String
  avatar      String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  addresses   Address[]
  userDetails UserDetails?
  cart        Products[]   @relation("Cart")
  favorites   Products[]   @relation("Favorites")
  orders      Orders[]

  @@map("user")
}

model Address {
  id         String   @id @default(cuid())
  addressNo1 String   @map("address_no1")
  addressNo2 String?  @map("address_no2")
  phoneNo    Int      @map("phone_no")
  landMark   String?  @map("land_mark")
  city       String
  state      String
  pinCode    Int      @map("pin_code")
  country    String   @default("India")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Products {
  id            String        @id @default(cuid())
  title         String
  description   String
  details       String?
  price         Int
  offer         String?
  size          String?
  image1        String        @map("image_1")
  image2        String?       @map("image_2")
  image3        String?       @map("image_3")
  image4        String?       @map("image_4")
  brand         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  orders        Orders[]      @relation("OrderProducts")
  usersCart     User[]        @relation("Cart")
  usersFav      User[]        @relation("Favorites")
  reviews       Reviews[]
  subcategories Subcategory[]

  @@map("products")
}

model Subcategory {
  id         String     @id @default(cuid())
  name       String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Products[]

  @@map("sub_category")
}

model Category {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  subcategories Subcategory[]

  @@map("category")
}

model Reviews {
  id          String   @id @default(cuid())
  title       String
  description String
  rating      Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  productsId  String   @map("products_id")
  products    Products @relation(fields: [productsId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Orders {
  id          String         @id @default(cuid())
  orderNumber String         @map("order_id")
  amount      Float
  status      String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  products    Products[]     @relation("OrderProducts")
  orderStatus OrdersStatus[]
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrdersStatus {
  id          String   @id @default(cuid())
  status      String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  ordersId    String   @map("orders_id")
  orders      Orders   @relation(fields: [ordersId], references: [id], onDelete: Cascade)

  @@map("orders_status")
}

model UserDetails {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

